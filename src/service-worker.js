/* eslint-disable no-underscore-dangle */
/* eslint-disable no-restricted-globals */
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules for the
// list of available Workbox modules, or add any other code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

const ignoredRoutes = ['/_', '/admin', '/api']

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell.
// Learn more at https://developers.google.com/web/fundamentals/architecture/app-shell
registerRoute(({ request, url }) => {
  // Return true to signal that we want to use the handler.
  // Return false to exempt requests from being fulfilled by index.html.
  // If this isn't a navigation, skip.
  if (request.mode !== 'navigate') {
    return false
  }

  // Skip urls that lie in the ignored routes.
  if (ignoredRoutes.some((route) => url.pathname.startsWith(route))) {
    return false
  }

  // Skip resource URLs (contain a file extension)
  if (url.pathname.match('/[^/?]+\\.[^/]+$')) {
    return false
  }

  return true
}, createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`))

// An example runtime caching route for requests that aren't handled by the precache,
// in this case same-origin .png requests like those from in 'public/'.
registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.

self.addEventListener('push', async (event) => {
  const data = event.data.json()
  const { title, body } = data

  const options = {
    body,
    icon: '/maskable-512x512.png',
    vibrate: [200, 100, 200, 100, 200, 100, 200],
    tag: 'resobin-timetable-notification',
    requireInteraction: true,
  }

  event.waitUntil(self.registration.showNotification(title, options))
})
